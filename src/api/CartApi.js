/*
 * Mercantile API
 * Programmatic access to the Mercantile service
 *
 * OpenAPI spec version: v1
 * Contact: gurleen.singh@drexel.edu
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.15
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/CartItem', 'model/InlineResponse2001'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/CartItem'), require('../model/InlineResponse2001'));
  } else {
    // Browser globals (root is window)
    if (!root.MercantileApi) {
      root.MercantileApi = {};
    }
    root.MercantileApi.CartApi = factory(root.MercantileApi.ApiClient, root.MercantileApi.CartItem, root.MercantileApi.InlineResponse2001);
  }
}(this, function(ApiClient, CartItem, InlineResponse2001) {
  'use strict';

  /**
   * Cart service.
   * @module api/CartApi
   * @version v1
   */

  /**
   * Constructs a new CartApi. 
   * @alias module:api/CartApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the cartCreate operation.
     * @callback module:api/CartApi~cartCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CartItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * CRUD for CartItems. Creating a cart item means that item is in your \"cart\".
     * @param {module:model/CartItem} data 
     * @param {module:api/CartApi~cartCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CartItem}
     */
    this.cartCreate = function(data, callback) {
      var postBody = data;

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling cartCreate");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CartItem;

      return this.apiClient.callApi(
        '/cart/', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the cartDelete operation.
     * @callback module:api/CartApi~cartDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * CRUD for CartItems. Creating a cart item means that item is in your \"cart\".
     * @param {String} id 
     * @param {module:api/CartApi~cartDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.cartDelete = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling cartDelete");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/cart/{id}/', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the cartList operation.
     * @callback module:api/CartApi~cartListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2001} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * CRUD for CartItems. Creating a cart item means that item is in your \"cart\".
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page A page number within the paginated result set.
     * @param {module:api/CartApi~cartListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2001}
     */
    this.cartList = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse2001;

      return this.apiClient.callApi(
        '/cart/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the cartPartialUpdate operation.
     * @callback module:api/CartApi~cartPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CartItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * CRUD for CartItems. Creating a cart item means that item is in your \"cart\".
     * @param {String} id 
     * @param {module:model/CartItem} data 
     * @param {module:api/CartApi~cartPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CartItem}
     */
    this.cartPartialUpdate = function(id, data, callback) {
      var postBody = data;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling cartPartialUpdate");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling cartPartialUpdate");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CartItem;

      return this.apiClient.callApi(
        '/cart/{id}/', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the cartRead operation.
     * @callback module:api/CartApi~cartReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CartItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * CRUD for CartItems. Creating a cart item means that item is in your \"cart\".
     * @param {String} id 
     * @param {module:api/CartApi~cartReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CartItem}
     */
    this.cartRead = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling cartRead");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CartItem;

      return this.apiClient.callApi(
        '/cart/{id}/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the cartUpdate operation.
     * @callback module:api/CartApi~cartUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CartItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * CRUD for CartItems. Creating a cart item means that item is in your \"cart\".
     * @param {String} id 
     * @param {module:model/CartItem} data 
     * @param {module:api/CartApi~cartUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CartItem}
     */
    this.cartUpdate = function(id, data, callback) {
      var postBody = data;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling cartUpdate");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling cartUpdate");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CartItem;

      return this.apiClient.callApi(
        '/cart/{id}/', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
